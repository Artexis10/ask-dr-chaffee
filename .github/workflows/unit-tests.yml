name: Unit Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/scripts/**/*.py'
      - 'tests/unit/**/*.py'
      - 'backend/requirements.txt'
      - '.github/workflows/unit-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/scripts/**/*.py'
      - 'tests/unit/**/*.py'
      - 'backend/requirements.txt'

jobs:
  test-windows:
    name: Unit Tests (Windows)
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-timeout freezegun hypothesis
          pip install isodate python-dotenv tqdm
      
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/test_ingest_*.py -m unit --cov=backend/scripts/ingest_youtube_enhanced.py --cov-branch --cov-report=xml --cov-report=term-missing -v
        env:
          PYTHONPATH: ${{ github.workspace }};${{ github.workspace }}/backend
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests,windows
          name: windows-unit-tests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Check coverage threshold
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          line_rate = float(root.attrib['line-rate'])
          branch_rate = float(root.attrib['branch-rate'])
          avg_coverage = (line_rate + branch_rate) / 2 * 100
          print(f'Coverage: {avg_coverage:.1f}%')
          if avg_coverage < 85:
              print(f'❌ Coverage {avg_coverage:.1f}% is below 85% threshold')
              exit(1)
          else:
              print(f'✅ Coverage {avg_coverage:.1f}% meets 85% threshold')
          "
  
  test-linux:
    name: Unit Tests (Linux)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-timeout freezegun hypothesis
          pip install isodate python-dotenv tqdm
      
      - name: Run unit tests
        run: |
          pytest tests/unit/test_ingest_*.py -m unit -v
        env:
          PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/backend
      
      - name: Test summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
